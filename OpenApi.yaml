openapi: "3.0.3"
info:
  title: task bitpin  API
  description: content ranting API

security:
  - bearerAuth: []
servers:
  - url: http://127.0.0.1:8000/api/v1

paths:
  /api/v1/token/:
    post:
      description: |
       get access and refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Session"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /currency_cash_withdraw/point_of_cash/available/:
    get:
      description: a user wants to select a point of cash to create a voucher upon it.
        it will exclude disabled point of cashes and the ones whose allocable
        credits are lesser than their max delivery value.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/PointOfCashUserList"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /currency_cash_withdraw/vouchers/:
    get:
      description: a user wants to see all his vouchers.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/VoucherListUserRead"

        "401":
          $ref: "#/components/responses/Unauthorized"


    post:
      description: by calling this method a user pays delivery value+fees and creates a voucher.
        if the user hasn't sufficient foreign currency, the operations fails. also if he exceeds his max vouchers per some period.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoucherUserCreate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/VoucherUserRead"
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /currency_cash_withdraw/vouchers/{uid}/cancel/:
    post:
      description: a user wants to cancel a voucher and redeem the bill value minus cancel penalty.
      parameters:
        - in: path
          name: uid
          schema:
            type: string
          required: true
          description: uid of requested voucher
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/VoucherUserRead"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /exchange/exchange_operations/:
    post:
      description: the exchange rate must be same or worse than current rate.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExchangeOperationRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ExchangeOperationInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /exchange/exchange_operations/mine/:
    get:
      description: a normal user can only see his exchange operations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ExchangeOperationUserResult"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /rate/rates/:
    get:
      description: any user wants to know history of rates
      parameters:
        - in: query
          name: uid__contains
          schema:
            type: string
        - in: query
          name: updated_at__gte
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: updated_at__lte
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: currency_price_when_selling_to_user__gte
          schema:
            $ref: "#/components/schemas/PriceField"
        - in: query
          name: currency_price_when_selling_to_user__lte
          schema:
            $ref: "#/components/schemas/PriceField"
        - in: query
          name: currency_price_when_buying_from_user__gte
          schema:
            $ref: "#/components/schemas/PriceField"
        - in: query
          name: currency_price_when_buying_from_user__lte
          schema:
            $ref: "#/components/schemas/PriceField"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExchangeRateInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /rate/rates/current/:
    get:
      description: any user can see current rates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ExchangeRateInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"



components:
  schemas:
    UID:
      type: string
      description: uid field
      example: "b19993ac-3fbe-4815-91af-636ba2b6b9dc"
    PriceField:
      type: integer
      description: positive integer field
      example: 2500
    RialPriceField:
      type: integer
      description: positive integer field
      example: 2500
    CurrencyPriceField:
      type: number
      format: float
      description: positive float field
      example: 2555.5
    Timestamp:
      type: integer
      description: timestamp in milliseconds
      example: 1689585772693
    Bool:
      type: boolean
      description: can be true or false
      example: true
    AccessMetaData:
      type: object
      properties:
        ip:
          type: string
        user_agent:
          type: string
    DateTime:
      type: object
      properties:
        year:
          type: integer
        month:
          type: integer
        day:
          type: integer
        hour:
          type: integer
        minute:
          type: integer
        second:
          type: integer
        millisecond:
          type: integer

    UserInCurrentSessionDetail:
      type: object
      properties:
        is_identified:
          type: boolean
        is_foreigner:
          type: boolean
        national_code:
          type: string
        mobile:
          type: string
        birth_date:
          $ref: "#/components/schemas/DateTime"

    Session:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/"

    CreateSessionWithUsernameAndPasswordRequest:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        captcha_key:
          type: string
        captcha_value:
          type: string
        username:
          type: string
        password:
          type: string


    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string


    Teller:
      type: object
      properties:
        user_uid:
          $ref: "#/components/schemas/UID"
        point_of_cash_uid:
          $ref: "#/components/schemas/UID"
        is_disabled:
          type: boolean


    PointOfCashUserRead:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        min_delivery_value:
          $ref: "#/components/schemas/CurrencyPriceField"
        delivery_value_step:
          $ref: "#/components/schemas/CurrencyPriceField"
        max_delivery_value:
          $ref: "#/components/schemas/CurrencyPriceField"
        name:
          type: string
        city:
          type: string
        address:
          type: string
        location:
          type: string
        telephones:
          type: array
          items:
            type: string
        sum_of_fees:
          $ref: "#/components/schemas/CurrencyPriceField"


    VoucherUserRead:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        user_uid:
          $ref: "#/components/schemas/UID"
        point_of_cash_uid:
          $ref: "#/components/schemas/UID"
        delivery_value:
          $ref: "#/components/schemas/CurrencyPriceField"
        receiver_name:
          type: string
        created_at:
          $ref: "#/components/schemas/Timestamp"
        canceled_at:
          $ref: "#/components/schemas/Timestamp"
        burned_at:
          $ref: "#/components/schemas/Timestamp"
        bill_value:
          $ref: "#/components/schemas/CurrencyPriceField"
        burn_pass_phrase:
          type: string

    VoucherUserCreate:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        user_uid:
          $ref: "#/components/schemas/UID"
        point_of_cash_uid:
          $ref: "#/components/schemas/UID"
        delivery_value:
          $ref: "#/components/schemas/CurrencyPriceField"
        receiver_name:
          type: string


    VoucherBurn:
      type: object
      properties:
        burned_to_uid:
          $ref: "#/components/schemas/UID"
        burn_pass_phrase:
          type: string


    PointOfCashUserList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/PointOfCashUserRead"
        count:
          type: integer
          example: 50


    VoucherListUserRead:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/VoucherUserRead"
        count:
          type: integer
          example: 50

    ExchangeOperationRequest:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        user_uid:
          $ref: "#/components/schemas/UID"
        change_in_rial:
          $ref: "#/components/schemas/RialPriceField"
        change_in_foreign_currency:
          $ref: "#/components/schemas/CurrencyPriceField"
        user_is_buying_foreign_currency:
          $ref: "#/components/schemas/Bool"

    ExchangeOperationInfo:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        user_uid:
          $ref: "#/components/schemas/UID"
        change_in_rial:
          $ref: "#/components/schemas/RialPriceField"
        change_in_foreign_currency:
          $ref: "#/components/schemas/CurrencyPriceField"
        user_is_buying_foreign_currency:
          $ref: "#/components/schemas/Bool"
        created_at:
          $ref: "#/components/schemas/Timestamp"


    ExchangeOperationDetails:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        user_uid:
          $ref: "#/components/schemas/UID"
        change_in_rial:
          $ref: "#/components/schemas/RialPriceField"
        change_in_foreign_currency:
          $ref: "#/components/schemas/CurrencyPriceField"
        user_is_buying_foreign_currency:
          $ref: "#/components/schemas/Bool"
        created_at:
          $ref: "#/components/schemas/Timestamp"
        total_rials_matched:
          $ref: "#/components/schemas/RialPriceField"
        is_closed:
          $ref: "#/components/schemas/Bool"
        profit:
          $ref: "#/components/schemas/CurrencyPriceField"
        matches:
          type: array
          items:
            $ref: "#/components/schemas/Match"

    Match:
      type: object
      properties:
        buy_operation_uid:
          type: string
        sell_operation_uid:
          type: string
        rials_matched:
          type: integer

    ExchangeOperationResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOperationDetails"
        count:
          type: integer
          example: 50

    ExchangeOperationUserResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOperationInfo"

    ExchangeRateInfo:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UID"
        currency_price_when_selling_to_user:
          $ref: "#/components/schemas/PriceField"
        currency_price_when_buying_from_user:
          $ref: "#/components/schemas/PriceField"
        updated_at:
          $ref: "#/components/schemas/Timestamp"


  responses:
    Unauthorized:
      description: Unauthorized Response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                enum:
                  - Unauthorized.
              type:
                type: string
                example: AuthenticationFailException
    Forbidden:
      description: Forbidden Response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                enum:
                  - You do not have permission to perform this action.
              type:
                type: string
                example: PermissionDeniedException
    ServiceUnavailable:
      description:  third party service is not available
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                enum:
                  - Tird party Service is not available.
              type:
                type: string
                example:  ServiceUnavailable
    BadRequest:
      description: bad request.
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  non_field_errors:
                    type: array
                    items:
                      type: string
                additionalProperties:
                  type: array
                  items:
                    type: string
              - type: array
                items:
                  type: string
                  example: Bad Request
    NotFound:
      description: Object Not Found Response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                enum:
                  - Not found.
              type:
                type: string
                example: NotFoundException
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
